# Generated from C:/Code/GitHub/davidbrownell/SimpleSchemaGenerator/src/SimpleSchemaGenerator/Schema/Parse/ANTLR/Grammar/SimpleSchema.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



from antlr_denter.DenterHelper import DenterHelper
from SimpleSchemaParser import SimpleSchemaParser



def serializedATN():
    return [
        4,0,62,434,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
        1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,
        3,39,254,8,39,1,39,1,39,1,39,5,39,259,8,39,10,39,12,39,262,9,39,
        1,40,3,40,265,8,40,1,40,1,40,1,40,5,40,270,8,40,10,40,12,40,273,
        9,40,1,40,1,40,1,41,1,41,3,41,279,8,41,1,41,1,41,5,41,283,8,41,10,
        41,12,41,286,9,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,
        44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,318,8,48,10,48,12,48,
        321,9,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,5,49,330,8,49,10,49,
        12,49,333,9,49,1,49,1,49,1,50,4,50,338,8,50,11,50,12,50,339,1,50,
        1,50,1,51,3,51,345,8,51,1,51,5,51,348,8,51,10,51,12,51,351,9,51,
        1,51,1,51,4,51,355,8,51,11,51,12,51,356,1,52,3,52,360,8,52,1,52,
        4,52,363,8,52,11,52,12,52,364,1,53,3,53,368,8,53,1,53,1,53,5,53,
        372,8,53,10,53,12,53,375,9,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,
        1,55,1,55,5,55,386,8,55,10,55,12,55,389,9,55,1,56,1,56,1,56,1,57,
        1,57,1,57,1,57,1,57,1,57,5,57,400,8,57,10,57,12,57,403,9,57,1,58,
        1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,5,59,415,8,59,10,59,
        12,59,418,9,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
        5,61,430,8,61,10,61,12,61,433,9,61,5,319,387,401,416,431,0,62,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
        47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
        57,115,58,117,59,119,60,121,61,123,62,1,0,8,2,0,9,9,32,32,2,0,10,
        10,13,13,1,0,48,57,4,0,36,36,38,38,64,64,95,95,153,0,35,35,42,42,
        48,57,65,90,97,122,169,169,174,174,8252,8252,8265,8265,8482,8482,
        8505,8505,8596,8601,8617,8618,8986,8987,9000,9000,9167,9167,9193,
        9203,9208,9210,9410,9410,9642,9643,9654,9654,9664,9664,9723,9726,
        9728,9732,9742,9742,9745,9745,9748,9749,9752,9752,9757,9757,9760,
        9760,9762,9763,9766,9766,9770,9770,9774,9775,9784,9786,9792,9792,
        9794,9794,9800,9811,9823,9824,9827,9827,9829,9830,9832,9832,9851,
        9851,9854,9855,9874,9879,9881,9881,9883,9884,9888,9889,9895,9895,
        9898,9899,9904,9905,9917,9918,9924,9925,9928,9928,9934,9935,9937,
        9937,9939,9940,9961,9962,9968,9973,9975,9978,9981,9981,9986,9986,
        9989,9989,9992,9997,9999,9999,10002,10002,10004,10004,10006,10006,
        10013,10013,10017,10017,10024,10024,10035,10036,10052,10052,10055,
        10055,10060,10060,10062,10062,10067,10069,10071,10071,10083,10084,
        10133,10135,10145,10145,10160,10160,10175,10175,10548,10549,11013,
        11015,11035,11036,11088,11088,11093,11093,12336,12336,12349,12349,
        12951,12951,12953,12953,126980,126980,127183,127183,127344,127345,
        127358,127359,127374,127374,127377,127386,127462,127487,127489,127490,
        127514,127514,127535,127535,127538,127546,127568,127569,127744,127777,
        127780,127891,127894,127895,127897,127899,127902,127984,127987,127989,
        127991,128253,128255,128317,128329,128334,128336,128359,128367,128368,
        128371,128378,128391,128391,128394,128397,128400,128400,128405,128406,
        128420,128421,128424,128424,128433,128434,128444,128444,128450,128452,
        128465,128467,128476,128478,128481,128481,128483,128483,128488,128488,
        128495,128495,128499,128499,128506,128591,128640,128709,128715,128722,
        128725,128727,128732,128741,128745,128745,128747,128748,128752,128752,
        128755,128764,128992,129003,129008,129008,129292,129338,129340,129349,
        129351,129535,129648,129660,129664,129672,129680,129725,129727,129733,
        129742,129755,129760,129768,129776,129784,4,0,48,57,65,90,95,95,
        97,122,1,0,34,34,1,0,39,39,457,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
        0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
        1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
        1,125,1,0,0,0,3,127,1,0,0,0,5,129,1,0,0,0,7,134,1,0,0,0,9,136,1,
        0,0,0,11,138,1,0,0,0,13,140,1,0,0,0,15,142,1,0,0,0,17,144,1,0,0,
        0,19,147,1,0,0,0,21,149,1,0,0,0,23,151,1,0,0,0,25,155,1,0,0,0,27,
        159,1,0,0,0,29,163,1,0,0,0,31,168,1,0,0,0,33,173,1,0,0,0,35,178,
        1,0,0,0,37,181,1,0,0,0,39,184,1,0,0,0,41,187,1,0,0,0,43,189,1,0,
        0,0,45,191,1,0,0,0,47,194,1,0,0,0,49,197,1,0,0,0,51,200,1,0,0,0,
        53,206,1,0,0,0,55,212,1,0,0,0,57,218,1,0,0,0,59,222,1,0,0,0,61,226,
        1,0,0,0,63,230,1,0,0,0,65,235,1,0,0,0,67,237,1,0,0,0,69,239,1,0,
        0,0,71,242,1,0,0,0,73,244,1,0,0,0,75,247,1,0,0,0,77,250,1,0,0,0,
        79,253,1,0,0,0,81,264,1,0,0,0,83,276,1,0,0,0,85,289,1,0,0,0,87,292,
        1,0,0,0,89,295,1,0,0,0,91,298,1,0,0,0,93,301,1,0,0,0,95,306,1,0,
        0,0,97,313,1,0,0,0,99,327,1,0,0,0,101,337,1,0,0,0,103,344,1,0,0,
        0,105,359,1,0,0,0,107,367,1,0,0,0,109,376,1,0,0,0,111,379,1,0,0,
        0,113,390,1,0,0,0,115,393,1,0,0,0,117,404,1,0,0,0,119,409,1,0,0,
        0,121,419,1,0,0,0,123,424,1,0,0,0,125,126,5,123,0,0,126,2,1,0,0,
        0,127,128,5,125,0,0,128,4,1,0,0,0,129,130,5,112,0,0,130,131,5,97,
        0,0,131,132,5,115,0,0,132,133,5,115,0,0,133,6,1,0,0,0,134,135,5,
        44,0,0,135,8,1,0,0,0,136,137,5,58,0,0,137,10,1,0,0,0,138,139,5,63,
        0,0,139,12,1,0,0,0,140,141,5,42,0,0,141,14,1,0,0,0,142,143,5,43,
        0,0,143,16,1,0,0,0,144,145,5,46,0,0,145,146,5,46,0,0,146,18,1,0,
        0,0,147,148,5,121,0,0,148,20,1,0,0,0,149,150,5,89,0,0,150,22,1,0,
        0,0,151,152,5,121,0,0,152,153,5,101,0,0,153,154,5,115,0,0,154,24,
        1,0,0,0,155,156,5,89,0,0,156,157,5,101,0,0,157,158,5,115,0,0,158,
        26,1,0,0,0,159,160,5,89,0,0,160,161,5,69,0,0,161,162,5,83,0,0,162,
        28,1,0,0,0,163,164,5,116,0,0,164,165,5,114,0,0,165,166,5,117,0,0,
        166,167,5,101,0,0,167,30,1,0,0,0,168,169,5,84,0,0,169,170,5,114,
        0,0,170,171,5,117,0,0,171,172,5,101,0,0,172,32,1,0,0,0,173,174,5,
        84,0,0,174,175,5,82,0,0,175,176,5,85,0,0,176,177,5,69,0,0,177,34,
        1,0,0,0,178,179,5,111,0,0,179,180,5,110,0,0,180,36,1,0,0,0,181,182,
        5,79,0,0,182,183,5,110,0,0,183,38,1,0,0,0,184,185,5,79,0,0,185,186,
        5,78,0,0,186,40,1,0,0,0,187,188,5,110,0,0,188,42,1,0,0,0,189,190,
        5,78,0,0,190,44,1,0,0,0,191,192,5,110,0,0,192,193,5,111,0,0,193,
        46,1,0,0,0,194,195,5,78,0,0,195,196,5,111,0,0,196,48,1,0,0,0,197,
        198,5,78,0,0,198,199,5,79,0,0,199,50,1,0,0,0,200,201,5,102,0,0,201,
        202,5,97,0,0,202,203,5,108,0,0,203,204,5,115,0,0,204,205,5,101,0,
        0,205,52,1,0,0,0,206,207,5,70,0,0,207,208,5,97,0,0,208,209,5,108,
        0,0,209,210,5,115,0,0,210,211,5,101,0,0,211,54,1,0,0,0,212,213,5,
        70,0,0,213,214,5,65,0,0,214,215,5,76,0,0,215,216,5,83,0,0,216,217,
        5,69,0,0,217,56,1,0,0,0,218,219,5,111,0,0,219,220,5,102,0,0,220,
        221,5,102,0,0,221,58,1,0,0,0,222,223,5,79,0,0,223,224,5,102,0,0,
        224,225,5,102,0,0,225,60,1,0,0,0,226,227,5,79,0,0,227,228,5,70,0,
        0,228,229,5,70,0,0,229,62,1,0,0,0,230,231,5,78,0,0,231,232,5,111,
        0,0,232,233,5,110,0,0,233,234,5,101,0,0,234,64,1,0,0,0,235,236,5,
        47,0,0,236,66,1,0,0,0,237,238,5,46,0,0,238,68,1,0,0,0,239,240,5,
        97,0,0,240,241,5,115,0,0,241,70,1,0,0,0,242,243,5,61,0,0,243,72,
        1,0,0,0,244,245,5,45,0,0,245,246,5,62,0,0,246,74,1,0,0,0,247,248,
        5,58,0,0,248,249,5,58,0,0,249,76,1,0,0,0,250,251,5,124,0,0,251,78,
        1,0,0,0,252,254,5,13,0,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,
        1,0,0,0,255,256,5,10,0,0,256,260,4,39,0,0,257,259,7,0,0,0,258,257,
        1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,80,1,
        0,0,0,262,260,1,0,0,0,263,265,5,13,0,0,264,263,1,0,0,0,264,265,1,
        0,0,0,265,266,1,0,0,0,266,267,5,10,0,0,267,271,4,40,1,0,268,270,
        7,0,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,
        1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,275,6,40,0,0,275,82,
        1,0,0,0,276,278,5,92,0,0,277,279,5,13,0,0,278,277,1,0,0,0,278,279,
        1,0,0,0,279,280,1,0,0,0,280,284,5,10,0,0,281,283,7,0,0,0,282,281,
        1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,
        1,0,0,0,286,284,1,0,0,0,287,288,6,41,0,0,288,84,1,0,0,0,289,290,
        5,40,0,0,290,291,6,42,1,0,291,86,1,0,0,0,292,293,5,41,0,0,293,294,
        6,43,2,0,294,88,1,0,0,0,295,296,5,91,0,0,296,297,6,44,3,0,297,90,
        1,0,0,0,298,299,5,93,0,0,299,300,6,45,4,0,300,92,1,0,0,0,301,302,
        5,102,0,0,302,303,5,114,0,0,303,304,5,111,0,0,304,305,5,109,0,0,
        305,94,1,0,0,0,306,307,5,105,0,0,307,308,5,109,0,0,308,309,5,112,
        0,0,309,310,5,111,0,0,310,311,5,114,0,0,311,312,5,116,0,0,312,96,
        1,0,0,0,313,314,5,35,0,0,314,315,5,47,0,0,315,319,1,0,0,0,316,318,
        9,0,0,0,317,316,1,0,0,0,318,321,1,0,0,0,319,320,1,0,0,0,319,317,
        1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,323,5,47,0,0,323,324,
        5,35,0,0,324,325,1,0,0,0,325,326,6,48,5,0,326,98,1,0,0,0,327,331,
        5,35,0,0,328,330,8,1,0,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,
        1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,0,334,335,
        6,49,5,0,335,100,1,0,0,0,336,338,7,0,0,0,337,336,1,0,0,0,338,339,
        1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,
        6,50,0,0,342,102,1,0,0,0,343,345,5,45,0,0,344,343,1,0,0,0,344,345,
        1,0,0,0,345,349,1,0,0,0,346,348,7,2,0,0,347,346,1,0,0,0,348,351,
        1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,
        1,0,0,0,352,354,5,46,0,0,353,355,7,2,0,0,354,353,1,0,0,0,355,356,
        1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,104,1,0,0,0,358,360,
        5,45,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,363,
        7,2,0,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,
        1,0,0,0,365,106,1,0,0,0,366,368,7,3,0,0,367,366,1,0,0,0,367,368,
        1,0,0,0,368,369,1,0,0,0,369,373,7,4,0,0,370,372,7,5,0,0,371,370,
        1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,108,
        1,0,0,0,375,373,1,0,0,0,376,377,3,111,55,0,377,378,5,34,0,0,378,
        110,1,0,0,0,379,387,5,34,0,0,380,381,5,92,0,0,381,386,5,34,0,0,382,
        383,5,92,0,0,383,386,5,92,0,0,384,386,8,6,0,0,385,380,1,0,0,0,385,
        382,1,0,0,0,385,384,1,0,0,0,386,389,1,0,0,0,387,388,1,0,0,0,387,
        385,1,0,0,0,388,112,1,0,0,0,389,387,1,0,0,0,390,391,3,115,57,0,391,
        392,5,39,0,0,392,114,1,0,0,0,393,401,5,39,0,0,394,395,5,92,0,0,395,
        400,5,39,0,0,396,397,5,92,0,0,397,400,5,92,0,0,398,400,8,7,0,0,399,
        394,1,0,0,0,399,396,1,0,0,0,399,398,1,0,0,0,400,403,1,0,0,0,401,
        402,1,0,0,0,401,399,1,0,0,0,402,116,1,0,0,0,403,401,1,0,0,0,404,
        405,3,119,59,0,405,406,5,34,0,0,406,407,5,34,0,0,407,408,5,34,0,
        0,408,118,1,0,0,0,409,410,5,34,0,0,410,411,5,34,0,0,411,412,5,34,
        0,0,412,416,1,0,0,0,413,415,9,0,0,0,414,413,1,0,0,0,415,418,1,0,
        0,0,416,417,1,0,0,0,416,414,1,0,0,0,417,120,1,0,0,0,418,416,1,0,
        0,0,419,420,3,123,61,0,420,421,5,39,0,0,421,422,5,39,0,0,422,423,
        5,39,0,0,423,122,1,0,0,0,424,425,5,39,0,0,425,426,5,39,0,0,426,427,
        5,39,0,0,427,431,1,0,0,0,428,430,9,0,0,0,429,428,1,0,0,0,430,433,
        1,0,0,0,431,432,1,0,0,0,431,429,1,0,0,0,432,124,1,0,0,0,433,431,
        1,0,0,0,23,0,253,260,264,271,278,284,319,331,339,344,349,356,359,
        364,367,373,385,387,399,401,416,431,6,0,1,0,1,42,0,1,43,1,1,44,2,
        1,45,3,6,0,0
    ]

class SimpleSchemaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    NEWLINE = 40
    NESTED_NEWLINE = 41
    LINE_CONTINUATION = 42
    LPAREN = 43
    RPAREN = 44
    LBRACK = 45
    RBRACK = 46
    INCLUDE_FROM = 47
    INCLUDE_IMPORT = 48
    MULTI_LINE_COMMENT = 49
    SINGLE_LINE_COMMENT = 50
    HORIZONTAL_WHITESPACE = 51
    NUMBER = 52
    INTEGER = 53
    IDENTIFIER = 54
    DOUBLE_QUOTE_STRING = 55
    UNTERMINATED_DOUBLE_QUOTE_STRING = 56
    SINGLE_QUOTE_STRING = 57
    UNTERMINATED_SINGLE_QUOTE_STRING = 58
    TRIPLE_DOUBLE_QUOTE_STRING = 59
    UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING = 60
    TRIPLE_SINGLE_QUOTE_STRING = 61
    UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'pass'", "','", "':'", "'?'", "'*'", "'+'", "'..'", 
            "'y'", "'Y'", "'yes'", "'Yes'", "'YES'", "'true'", "'True'", 
            "'TRUE'", "'on'", "'On'", "'ON'", "'n'", "'N'", "'no'", "'No'", 
            "'NO'", "'false'", "'False'", "'FALSE'", "'off'", "'Off'", "'OFF'", 
            "'None'", "'/'", "'.'", "'as'", "'='", "'->'", "'::'", "'|'", 
            "'('", "')'", "'['", "']'", "'from'", "'import'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "NESTED_NEWLINE", "LINE_CONTINUATION", "LPAREN", 
            "RPAREN", "LBRACK", "RBRACK", "INCLUDE_FROM", "INCLUDE_IMPORT", 
            "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "HORIZONTAL_WHITESPACE", 
            "NUMBER", "INTEGER", "IDENTIFIER", "DOUBLE_QUOTE_STRING", "UNTERMINATED_DOUBLE_QUOTE_STRING", 
            "SINGLE_QUOTE_STRING", "UNTERMINATED_SINGLE_QUOTE_STRING", "TRIPLE_DOUBLE_QUOTE_STRING", 
            "UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING", "TRIPLE_SINGLE_QUOTE_STRING", 
            "UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "NEWLINE", "NESTED_NEWLINE", "LINE_CONTINUATION", 
                  "LPAREN", "RPAREN", "LBRACK", "RBRACK", "INCLUDE_FROM", 
                  "INCLUDE_IMPORT", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                  "HORIZONTAL_WHITESPACE", "NUMBER", "INTEGER", "IDENTIFIER", 
                  "DOUBLE_QUOTE_STRING", "UNTERMINATED_DOUBLE_QUOTE_STRING", 
                  "SINGLE_QUOTE_STRING", "UNTERMINATED_SINGLE_QUOTE_STRING", 
                  "TRIPLE_DOUBLE_QUOTE_STRING", "UNTERMINATED_TRIPLE_DOUBLE_QUOTE_STRING", 
                  "TRIPLE_SINGLE_QUOTE_STRING", "UNTERMINATED_TRIPLE_SINGLE_QUOTE_STRING" ]

    grammarFileName = "SimpleSchema.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



    def CustomInitialization(self):
        self._nested_pair_ctr = 0
        self._lexing_include_filename = False

    class SimpleSchemaDenter(DenterHelper):
        def __init__(self, lexer, newline_token, indent_token, dedent_token):
            super().__init__(newline_token, indent_token, dedent_token, should_ignore_eof=False)

            self.lexer: SimpleSchemaLexer = lexer

        def pull_token(self):
            return super(SimpleSchemaLexer, self.lexer).nextToken()

    def nextToken(self):
        if not hasattr(self, "_denter"):
            self._denter = self.__class__.SimpleSchemaDenter(
                self,
                SimpleSchemaParser.NEWLINE,
                SimpleSchemaParser.INDENT,
                SimpleSchemaParser.DEDENT,
            )

        return self._denter.next_token()



    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[42] = self.LPAREN_action 
            actions[43] = self.RPAREN_action 
            actions[44] = self.LBRACK_action 
            actions[45] = self.RBRACK_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self._nested_pair_ctr += 1
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self._nested_pair_ctr -= 1
     

    def LBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self._nested_pair_ctr += 1
     

    def RBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self._nested_pair_ctr -= 1
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[39] = self.NEWLINE_sempred
            preds[40] = self.NESTED_NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self._nested_pair_ctr == 0
         

    def NESTED_NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 1:
                return self._nested_pair_ctr != 0
         


