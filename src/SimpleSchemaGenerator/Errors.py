# ----------------------------------------------------------------------
# |
# |  Errors.py
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2024-04-10 08:30:59
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2024
# |  Distributed under the MIT License.
# |
# ----------------------------------------------------------------------
"""Contains errors generated by this library"""

from pathlib import Path

from .Common.Error import CreateErrorType, Region

# Convenience imports
from .Common.Error import SimpleSchemaGeneratorException  # pylint: disable=unused-import


# TODO: Search for 'range' and replace with 'region'

# ----------------------------------------------------------------------
# |
# |  ANTLR Parsing Errors
# |
# ----------------------------------------------------------------------
# These errors are defined as strings rather than ErrorType because they only have a beginning
# Location and not a start and end Location as required by the Region in ErrorType.
antlr_invalid_opening_token = "Triple-quote delimiters that initiate multiline strings cannot have any content on the same line as the opening token."
antlr_invalid_closing_token = "Triple-quote delimiters that terminate multiline strings cannot have any content on the same line as the closing token."
antlr_invalid_indentation = "Invalid multiline string indentation."

ParseStructureStatementInvalidBase = CreateErrorType("Base types must be identifiers.")

ParseCreateIncludeStatementDirWithStar = CreateErrorType(
    "Filenames must be provided with wildcard imports; '{name}' is a directory.",
    name=Path,
)
ParseCreateIncludeStatementInvalidFilename = CreateErrorType(
    "'{name}' is not a valid filename.",
    name=str,
)
ParseCreateIncludeStatementInvalidDirectory = CreateErrorType(
    "'{name}' is not a valid directory.",
    name=str,
)
ParseCreateIncludeStatementInvalidWorkspace = CreateErrorType(
    "The included file '{name}' is not a descendant of any workspace.",
    name=Path,
)


# ----------------------------------------------------------------------
# |
# |  Element Construction Errors
# |
# ----------------------------------------------------------------------
CardinalityInvalidRange = CreateErrorType("Invalid cardinality ({min} > {max}).", min=int, max=int)

MetadataItemDuplicated = CreateErrorType(
    "The metadata item '{key}' was already provided at {prev_region}.",
    key=str,
    prev_region=Region,
)

TupleExpressionEmpty = CreateErrorType("No expressions were provided.")

ParseIdentifierNoChars = CreateErrorType(
    "'{id}' does not have any identifiable characters.",
    id=str,
)
ParseIdentifierNotAlpha = CreateErrorType(
    "The first identifiable character in '{id}' must be a letter or emoji.",
    id=str,
)

ParseIdentifierTypeEmpty = CreateErrorType("Identifier types must have at least one identifier.")
ParseIdentifierTypeNotType = CreateErrorType("'{id}' is not a valid type name.", id=str)

ParseIncludeStatementItemNotType = CreateErrorType(
    "The imported element '{name}' is not a type.", name=str
)
ParseIncludeStatementItemReferenceNotType = CreateErrorType(
    "'{name}' is not a type name.", name=str
)

ParseIncludeStatementInvalidFile = CreateErrorType("'{name}' is not a valid file.", name=Path)
ParseIncludeStatementInvalidItems = CreateErrorType("No items were expected.")
ParseIncludeStatementMissingItems = CreateErrorType("Items were expected.")

ParseTupleTypeMissingTypes = CreateErrorType("No tuple types were provided.")

ParseVariantTypeMissingTypes = CreateErrorType("Not enough types were provided.")
ParseVariantTypeNestedType = CreateErrorType("Nested variant types are not supported.")

RootStatementInvalidNested = CreateErrorType("Root statements cannot be nested.")


ExtensionStatementDuplicateKeywordArgError = CreateErrorType(
    "An argument for the parameter '{name}' was already provided at '{region}'.",
    name=str,
    region=Region,
)
