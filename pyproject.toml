[project]
name = "SimpleSchemaGenerator"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "David Brownell", email = "github@DavidBrownell.com" }
]
requires-python = ">= 3.13"
dependencies = [
    "antlr-denter>=1.3.1",
    "dbrownell-common>=0.14.6",
    "emoji>=2.14.1",
    "typer>=0.15.3",
]
dynamic = ["version"]
classifiers = [
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.13",
]

[project.license]
text = "MIT"

[project.urls]
Homepage = "https://github.com/davidbrownell/SimpleSchemaGenerator"
Documentation = "https://github.com/davidbrownell/SimpleSchemaGenerator"
Repository = "https://github.com/davidbrownell/SimpleSchemaGenerator"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "autogitsemver>=0.8.1",
    "dbrownell-commitemojis>=0.1.1",
    "pre-commit>=4.2.0",
    "pyfakefs>=5.8.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.9",
    "syrupy>=4.9.1",
]

[tool.coverage.run]
omit = [
    "*/GeneratedCode/*",
    "src/SimpleSchemaGenerator/Schema/Elements/Types/Impl/*",
]

[tool.hatch.version]
path = "src/SimpleSchemaGenerator/__init__.py"

[tool.pytest.ini_options]
addopts = "--verbose -vv --capture=no --cov=SimpleSchemaGenerator --cov-fail-under=95.0"
python_files = [
    "**/*Test.py",
]

[tool.ruff]
line-length = 110
extend-exclude = ["src/SimpleSchemaGenerator/Schema/Parse/ANTLR/GeneratedCode"]

[tool.ruff.lint]
exclude = ["tests/**"]

select = ["ALL"]

ignore = [
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "BLE001", # Do not catch blind exception: `Exception`
    "COM812", # Trailing comma missing
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__` method
    "D202", # No blank lines allowed after function docstring
    "D400", # First line should end with a period
    "D415", # First line should end with a period, question mark, or exclamation point
    "E501", # Line too long
    "FIX002", # Line contains TODO, consider resolving the issue
    "I001", # Import block is un-sorted or un-formatted
    "N802", # Function name `xxx` should be lowercase
    "N999", # Invalid module name
    "S101", # Use of assert detected
    "TC006", # Add quotes to type expression in `typing.cast()`
    "TD002", # Missing author in TODO
    "TD003", # Missing issue link for this TODO
    "TRY002", # Create your own exception
    "TRY300", # Consider moving this statement to an `else` block
    "UP032", # Use f-string instead of `format` call
]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 20
max-returns = 20
